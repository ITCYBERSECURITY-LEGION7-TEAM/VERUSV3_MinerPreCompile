#!/bin/bash

# Mining Manager Script - VIPOR & LUCKPOOL
# Created for Linux mining operations

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Configuration file
CONFIG_FILE="config.json"
CCMINER_PATH="./ccminer"  # Adjust path to your ccminer

# Pool configurations
VIPOR_POOLS=(
    "sg.vipor.net:5040"
    "eu.vipor.net:5040" 
    "us.vipor.net:5040"
    "jp.vipor.net:5040"
    "au.vipor.net:5040"
    "ca.vipor.net:5040"
    "br.vipor.net:5040"
    "in.vipor.net:5040"
    "kr.vipor.net:5040"
    "de.vipor.net:5040"
)

LUCKPOOL_POOLS=(
    "na.luckpool.net:3960"
    "eu.luckpool.net:3960"
    "ap.luckpool.net:3960"
    "sa.luckpool.net:3960"
    "us.luckpool.net:3960"
    "ca.luckpool.net:3960"
    "de.luckpool.net:3960"
    "fr.luckpool.net:3960"
    "jp.luckpool.net:3960"
    "sg.luckpool.net:3960"
)

# Animation functions
show_hacker_animation() {
    local duration=$1
    local chars=("█" "▓" "▒" "░" "▄" "▀" "■" "□" "▢" "▣" "▤" "▥" "▦" "▧" "▨" "▩" "▪" "▫" "▬" "▭" "▮" "▯" "▰" "▱")
    local steps=100
    local delay=$(echo "scale=3; $duration/$steps" | bc)
    
    echo -e "\n${CYAN}🚀 INITIALIZING MINING SYSTEM...${NC}"
    
    for ((i=0; i<=$steps; i++)); do
        local percent=$((i))
        local char_index=$((i % ${#chars[@]}))
        local char="${chars[$char_index]}"
        
        # Create progress bar
        local bar=""
        local bar_length=50
        local filled=$((i * bar_length / steps))
        local empty=$((bar_length - filled))
        
        for ((j=0; j<filled; j++)); do
            bar+="${GREEN}${char}${NC}"
        done
        
        for ((j=0; j<empty; j++)); do
            bar+="${RED}${chars[0]}${NC}"
        done
        
        # Display animation
        echo -ne "\r${PURPLE}[HACKER MODE] ${bar} ${percent}% ${char}${NC}"
        sleep $delay
    done
    echo -e "\n${GREEN}✅ SYSTEM READY!${NC}\n"
}

show_mining_animation() {
    local pool_name=$1
    local worker=$2
    echo -e "\n${CYAN}⛏️  MINING STARTED ON ${pool_name}${NC}"
    echo -e "${GREEN}👷 WORKER: ${worker}${NC}"
    
    local mining_chars=("⛏️" "⚒️" "🔨" "💎" "⭐" "🌟" "💫" "✨" "🔥" "💻")
    local i=0
    
    while true; do
        local char_index=$((i % ${#mining_chars[@]}))
        local char="${mining_chars[$char_index]}"
        local hashrate=$((RANDOM % 1000 + 500))
        local shares=$((RANDOM % 100))
        
        echo -ne "\r${YELLOW}${char} MINING... Hashrate: ${hashrate} H/s | Shares: ${shares} ${char}${NC}"
        sleep 0.5
        ((i++))
    done
}

# Function to create config.json
create_config() {
    local pool=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    
    cat > $CONFIG_FILE << EOF
{
    "pool": "$pool",
    "wallet": "$wallet",
    "worker": "$worker",
    "cpu_usage": "$cpu_usage",
    "algorithm": "verus",
    "intensity": 16,
    "threads": $(nproc),
    "auto_reconnect": true,
    "retry_pause": 5,
    "timeout": 300
}
EOF
    echo -e "${GREEN}✅ Config file created: $CONFIG_FILE${NC}"
}

# Function to validate wallet address
validate_wallet() {
    local wallet=$1
    if [[ ${#wallet} -lt 10 ]]; then
        return 1
    fi
    return 0
}

# Function to validate worker name
validate_worker() {
    local worker=$1
    if [[ ${#worker} -lt 1 ]]; then
        return 1
    fi
    return 0
}

# Function to get CPU usage limit
get_cpu_usage() {
    while true; do
        echo -e "${YELLOW}💻 Enter CPU usage percentage (10-100): ${NC}"
        read -r cpu_usage
        
        if [[ $cpu_usage =~ ^[0-9]+$ ]] && [ $cpu_usage -ge 10 ] && [ $cpu_usage -le 100 ]; then
            echo $cpu_usage
            break
        else
            echo -e "${RED}❌ Invalid CPU usage! Please enter between 10-100${NC}"
        fi
    done
}

# VIPOR Mining function
start_vipor_mining() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║           VIPOR MINING SETUP         ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Show available pools
    echo -e "${YELLOW}🌐 Available VIPOR Pools:${NC}"
    for i in "${!VIPOR_POOLS[@]}"; do
        echo -e "${GREEN}$((i+1)). ${VIPOR_POOLS[$i]}${NC}"
    done
    
    # Pool selection
    local pool_index=0
    while true; do
        echo -e "\n${YELLOW}🔢 Select pool (1-${#VIPOR_POOLS[@]}): ${NC}"
        read -r pool_choice
        
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#VIPOR_POOLS[@]} ]; then
            pool_index=$((pool_choice-1))
            break
        else
            echo -e "${RED}❌ Invalid selection!${NC}"
        fi
    done
    
    local selected_pool="${VIPOR_POOLS[$pool_index]}"
    
    # Wallet input
    local wallet=""
    while true; do
        echo -e "\n${YELLOW}💰 Enter your Wallet Address: ${NC}"
        read -r wallet
        
        if validate_wallet "$wallet"; then
            break
        else
            echo -e "${RED}❌ Invalid wallet address!${NC}"
        fi
    done
    
    # Worker input
    local worker=""
    while true; do
        echo -e "\n${YELLOW}👷 Enter Worker Name: ${NC}"
        read -r worker
        
        if validate_worker "$worker"; then
            break
        else
            echo -e "${RED}❌ Invalid worker name!${NC}"
        fi
    done
    
    # CPU usage
    local cpu_usage=$(get_cpu_usage)
    
    # Show configuration summary
    echo -e "\n${GREEN}✅ Configuration Summary:${NC}"
    echo -e "${BLUE}🏊 Pool: $selected_pool${NC}"
    echo -e "${BLUE}💰 Wallet: $wallet${NC}"
    echo -e "${BLUE}👷 Worker: $worker${NC}"
    echo -e "${BLUE}💻 CPU Usage: ${cpu_usage}%${NC}"
    
    # Create config
    create_config "$selected_pool" "$wallet" "$worker" "$cpu_usage"
    
    # Show hacker animation
    show_hacker_animation 3
    
    # Start mining (in background to allow animation)
    echo -e "\n${GREEN}🚀 Starting CCminer for VIPOR...${NC}"
    
    # Start mining animation in background
    show_mining_animation "VIPOR" "$worker" &
    local animation_pid=$!
    
    # Start actual mining (replace with your ccminer command)
    # Example: $CCMINER_PATH -a verus -o stratum+tcp://$selected_pool -u $wallet.$worker -p x -t $cpu_usage
    
    # For demo purposes, we'll just sleep
    sleep 10
    
    # Stop animation
    kill $animation_pid 2>/dev/null
    wait $animation_pid 2>/dev/null
    
    echo -e "\n${GREEN}✅ Mining session completed!${NC}"
}

# LUCKPOOL Mining function
start_luckpool_mining() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║          LUCKPOOL MINING SETUP       ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Show available pools
    echo -e "${YELLOW}🌐 Available LUCKPOOL Pools:${NC}"
    for i in "${!LUCKPOOL_POOLS[@]}"; do
        echo -e "${GREEN}$((i+1)). ${LUCKPOOL_POOLS[$i]}${NC}"
    done
    
    # Pool selection
    local pool_index=0
    while true; do
        echo -e "\n${YELLOW}🔢 Select pool (1-${#LUCKPOOL_POOLS[@]}): ${NC}"
        read -r pool_choice
        
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#LUCKPOOL_POOLS[@]} ]; then
            pool_index=$((pool_choice-1))
            break
        else
            echo -e "${RED}❌ Invalid selection!${NC}"
        fi
    done
    
    local selected_pool="${LUCKPOOL_POOLS[$pool_index]}"
    
    # Wallet input
    local wallet=""
    while true; do
        echo -e "\n${YELLOW}💰 Enter your Wallet Address: ${NC}"
        read -r wallet
        
        if validate_wallet "$wallet"; then
            break
        else
            echo -e "${RED}❌ Invalid wallet address!${NC}"
        fi
    done
    
    # Worker input
    local worker=""
    while true; do
        echo -e "\n${YELLOW}👷 Enter Worker Name: ${NC}"
        read -r worker
        
        if validate_worker "$worker"; then
            break
        else
            echo -e "${RED}❌ Invalid worker name!${NC}"
        fi
    done
    
    # CPU usage
    local cpu_usage=$(get_cpu_usage)
    
    # Show configuration summary
    echo -e "\n${GREEN}✅ Configuration Summary:${NC}"
    echo -e "${BLUE}🏊 Pool: $selected_pool${NC}"
    echo -e "${BLUE}💰 Wallet: $wallet${NC}"
    echo -e "${BLUE}👷 Worker: $worker${NC}"
    echo -e "${BLUE}💻 CPU Usage: ${cpu_usage}%${NC}"
    
    # Create config
    create_config "$selected_pool" "$wallet" "$worker" "$cpu_usage"
    
    # Show hacker animation
    show_hacker_animation 3
    
    # Start mining (in background to allow animation)
    echo -e "\n${GREEN}🚀 Starting CCminer for LUCKPOOL...${NC}"
    
    # Start mining animation in background
    show_mining_animation "LUCKPOOL" "$worker" &
    local animation_pid=$!
    
    # Start actual mining (replace with your ccminer command)
    # Example: $CCMINER_PATH -a verus -o stratum+tcp://$selected_pool -u $wallet.$worker -p x -t $cpu_usage
    
    # For demo purposes, we'll just sleep
    sleep 10
    
    # Stop animation
    kill $animation_pid 2>/dev/null
    wait $animation_pid 2>/dev/null
    
    echo -e "\n${GREEN}✅ Mining session completed!${NC}"
}

# Main menu
show_main_menu() {
    clear
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════╗"
    echo "║    🚀 MINING MANAGER - HACKER MODE  ║"
    echo "║          AUTO CONFIG SYSTEM         ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄${NC}"
    echo -e "${GREEN}1. 🏊 VIPOR MINING (10 Pools)${NC}"
    echo -e "${GREEN}2. 🍀 LUCKPOOL MINING (10 Pools)${NC}"
    echo -e "${GREEN}3. 📊 VIEW CURRENT CONFIG${NC}"
    echo -e "${GREEN}4. 🚪 EXIT${NC}"
    echo -e "${CYAN}▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀${NC}"
    echo -e "${YELLOW}🎮 Select option (1-4): ${NC}"
}

# View current config
view_config() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║         CURRENT CONFIGURATION        ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    if [ -f "$CONFIG_FILE" ]; then
        echo -e "${GREEN}📁 Config file found: $CONFIG_FILE${NC}"
        echo -e "\n${YELLOW}📋 Content:${NC}"
        cat "$CONFIG_FILE" | while read line; do
            echo -e "${BLUE}   $line${NC}"
        done
    else
        echo -e "${RED}❌ No config file found!${NC}"
    fi
    
    echo -e "\n${YELLOW}Press Enter to continue...${NC}"
    read
}

# Main program loop
main() {
    # Check if bc is installed for calculations
    if ! command -v bc &> /dev/null; then
        echo -e "${RED}❌ 'bc' command is required. Install with: sudo apt-get install bc${NC}"
        exit 1
    fi
    
    while true; do
        show_main_menu
        read -r choice
        
        case $choice in
            1)
                start_vipor_mining
                ;;
            2)
                start_luckpool_mining
                ;;
            3)
                view_config
                ;;
            4)
                echo -e "\n${GREEN}👋 Thank you for using Mining Manager!${NC}"
                echo -e "${PURPLE}🚀 Happy Mining! 💎${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}❌ Invalid option! Please select 1-4${NC}"
                sleep 2
                ;;
        esac
        
        echo -e "\n${YELLOW}Press Enter to continue...${NC}"
        read
    done
}

# Start the program
main
