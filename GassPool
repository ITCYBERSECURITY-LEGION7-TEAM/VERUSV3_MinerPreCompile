#!/bin/bash

# Mining Auto Configuration Script
# Supports Vipor and Luckpool with animated UI

# Colors for UI
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Animation characters
CHARS="/-\|"
DOTS=".oO°Oo."

# Clear screen
clear

# Function to display banner
show_banner() {
    echo -e "${RED}"
    cat << "EOF"
  ▄████▄   ▄████▄   ███▄ ▄███▓ ██▓ ███▄    █ ▓█████  ██▀███  
▒██▀ ▀█  ▒██▀ ▀█  ▓██▒▀█▀ ██▒▓██▒ ██ ▀█   █ ▓█   ▀ ▓██ ▒ ██▒
▒▓█    ▄ ▒▓█    ▄ ▓██    ▓██░▒██▒▓██  ▀█ ██▒▒███   ▓██ ░▄█ ▒
▒▓▓▄ ▄██▒▒▓▓▄ ▄██▒▒██    ▒██ ░██░▓██▒  ▐▌██▒▒▓█  ▄ ▒██▀▀█▄  
▒ ▓███▀ ░▒ ▓███▀ ░▒██▒   ░██▒░██░▒██░   ▓██░░▒████▒░██▓ ▒██▒
░ ░▒ ▒  ░░ ░▒ ▒  ░░ ▒░   ░  ░░▓  ░ ▒░   ▒ ▒ ░░ ▒░ ░░ ▒▓ ░▒▓░
  ░  ▒     ░  ▒   ░  ░      ░ ▒ ░░ ░░   ░ ▒░ ░ ░  ░  ░▒ ░ ▒░
░        ░        ░      ░    ▒ ░   ░   ░ ░    ░     ░░   ░ 
░ ░      ░ ░             ░    ░           ░    ░  ░   ░     
░        ░                                                  
EOF
    echo -e "${NC}"
}

# Function to show loading animation
loading_animation() {
    local pid=$1
    local text=$2
    local delay=0.1
    local i=0
    
    echo -ne "${CYAN}$text ${NC}"
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) % 4 ))
        echo -ne "\r${CYAN}$text ${CHARS:$i:1} ${NC}"
        sleep $delay
    done
    echo -ne "\r${GREEN}$text ✓${NC}\n"
}

# Function to show progress bar
progress_bar() {
    local duration=$1
    local text=$2
    local steps=50
    local step_delay=$(echo "scale=3; $duration/$steps" | bc)
    
    echo -e "\n${BLUE}$text${NC}"
    echo -ne "${PURPLE}["
    
    for ((i=0; i<=steps; i++)); do
        echo -ne "▰"
        sleep $step_delay
    done
    
    echo -ne "]${NC}"
    echo -e " ${GREEN}COMPLETED!${NC}\n"
}

# Function to create config file
create_config() {
    local pool=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    
    cat > config.json << EOF
{
    "pools": [{
        "url": "$pool",
        "user": "$wallet.$worker",
        "pass": "x",
        "algo": "yespower",
        "nicehash": false
    }],
    "api": {
        "port": 4068,
        "access-token": null,
        "worker-id": null
    },
    "cpu-usage": $cpu_usage,
    "threads": null,
    "quiet": false,
    "debug": false
}
EOF
}

# Function to start mining
start_mining() {
    local pool_name=$1
    local pool_url=$2
    local wallet=$3
    local worker=$4
    local cpu_usage=$5
    
    echo -e "\n${YELLOW}Initializing Mining Setup...${NC}"
    
    # Show configuration details
    echo -e "${CYAN}Pool:${NC} $pool_name"
    echo -e "${CYAN}URL:${NC} $pool_url"
    echo -e "${CYAN}Wallet:${NC} $wallet"
    echo -e "${CYAN}Worker:${NC} $worker"
    echo -e "${CYAN}CPU Usage:${NC} $cpu_usage%"
    
    # Create config file
    echo -e "\n${BLUE}Creating configuration file...${NC}"
    create_config "$pool_url" "$wallet" "$worker" "$cpu_usage" &
    pid=$!
    loading_animation $pid "Generating config.json"
    
    # Validate ccminer exists
    if [ ! -f "./ccminer" ] && [ ! -f "./ccminer.exe" ]; then
        echo -e "${RED}Error: ccminer not found in current directory!${NC}"
        echo -e "${YELLOW}Please ensure ccminer is in the same folder as this script.${NC}"
        exit 1
    fi
    
    # Start mining with animation
    echo -e "\n${GREEN}Starting Miner...${NC}"
    progress_bar 3 "Initializing mining engine"
    
    echo -e "${RED}"
    echo "╔══════════════════════════════════════════════════╗"
    echo "║                 MINING STARTED                   ║"
    echo "║                                                  ║"
    echo "║  Pool: $pool_name$(printf '%*s' $((25-${#pool_name})) )║"
    echo "║  Wallet: $wallet$(printf '%*s' $((23-${#wallet})) )║"
    echo "║  Worker: $worker$(printf '%*s' $((23-${#worker})) )║"
    echo "║  CPU Usage: $cpu_usage%$(printf '%*s' $((20-${#cpu_usage})) )║"
    echo "║                                                  ║"
    echo "╚══════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Start ccminer
    if [ -f "./ccminer" ]; then
        chmod +x ./ccminer
        ./ccminer -c config.json
    elif [ -f "./ccminer.exe" ]; then
        ./ccminer.exe -c config.json
    fi
}

# Main menu
main_menu() {
    while true; do
        show_banner
        
        echo -e "${WHITE}Select Mining Pool:${NC}"
        echo -e "${GREEN}1. VIPOR Pool (10 Options)${NC}"
        echo -e "${YELLOW}2. LUCKPOOL Pool (10 Options)${NC}"
        echo -e "${RED}3. Exit${NC}"
        echo -e ""
        echo -ne "${CYAN}Enter your choice (1-3): ${NC}"
        read main_choice
        
        case $main_choice in
            1)
                vipor_menu
                ;;
            2)
                luckpool_menu
                ;;
            3)
                echo -e "${RED}Exiting... Happy Mining!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice! Please select 1-3${NC}"
                sleep 2
                ;;
        esac
    done
}

# Vipor pool menu
vipor_menu() {
    clear
    show_banner
    echo -e "${GREEN}╔══════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                 VIPOR POOL SELECTION             ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════╝${NC}"
    echo -e ""
    
    # Vipor pool options
    vipor_pools=(
        "sg.vipor.net:5040    - Singapore"
        "jp.vipor.net:5040    - Japan" 
        "us.vipor.net:5040    - United States"
        "eu.vipor.net:5040    - Europe"
        "au.vipor.net:5040    - Australia"
        "ca.vipor.net:5040    - Canada"
        "de.vipor.net:5040    - Germany"
        "fr.vipor.net:5040    - France"
        "uk.vipor.net:5040    - United Kingdom"
        "br.vipor.net:5040    - Brazil"
    )
    
    for i in "${!vipor_pools[@]}"; do
        echo -e "${GREEN}$((i+1)). ${vipor_pools[i]}${NC}"
    done
    echo -e "${GREEN}11. Back to Main Menu${NC}"
    echo -e ""
    echo -ne "${CYAN}Select Vipor Pool (1-11): ${NC}"
    read pool_choice
    
    if [ $pool_choice -eq 11 ]; then
        return
    elif [ $pool_choice -ge 1 ] && [ $pool_choice -le 10 ]; then
        selected_pool=${vipor_pools[$((pool_choice-1))]}
        pool_url=$(echo $selected_pool | awk '{print $1}')
        pool_name="VIPOR-$(echo $selected_pool | awk '{print $3}')"
        
        # Get user input
        echo -ne "${CYAN}Enter Wallet Address: ${NC}"
        read wallet
        echo -ne "${CYAN}Enter Worker Name: ${NC}"
        read worker
        echo -ne "${CYAN}Enter CPU Usage % (1-100): ${NC}"
        read cpu_usage
        
        # Validate CPU usage
        if [ $cpu_usage -lt 1 ] || [ $cpu_usage -gt 100 ]; then
            echo -e "${RED}Invalid CPU usage! Using default 50%${NC}"
            cpu_usage=50
        fi
        
        start_mining "$pool_name" "$pool_url" "$wallet" "$worker" "$cpu_usage"
    else
        echo -e "${RED}Invalid selection!${NC}"
        sleep 2
        vipor_menu
    fi
}

# Luckpool menu
luckpool_menu() {
    clear
    show_banner
    echo -e "${YELLOW}╔══════════════════════════════════════════════════╗${NC}"
    echo -e "${YELLOW}║                LUCKPOOL SELECTION                ║${NC}"
    echo -e "${YELLOW}╚══════════════════════════════════════════════════╝${NC}"
    echo -e ""
    
    # Luckpool options
    luckpool_pools=(
        "na.luckpool.net:3960   - North America"
        "eu.luckpool.net:3960   - Europe"
        "ap.luckpool.net:3960   - Asia Pacific"
        "sa.luckpool.net:3960   - South America"
        "af.luckpool.net:3960   - Africa"
        "oc.luckpool.net:3960   - Oceania"
        "us.luckpool.net:3960   - United States"
        "ca.luckpool.net:3960   - Canada"
        "de.luckpool.net:3960   - Germany"
        "sg.luckpool.net:3960   - Singapore"
    )
    
    for i in "${!luckpool_pools[@]}"; do
        echo -e "${YELLOW}$((i+1)). ${luckpool_pools[i]}${NC}"
    done
    echo -e "${YELLOW}11. Back to Main Menu${NC}"
    echo -e ""
    echo -ne "${CYAN}Select Luckpool (1-11): ${NC}"
    read pool_choice
    
    if [ $pool_choice -eq 11 ]; then
        return
    elif [ $pool_choice -ge 1 ] && [ $pool_choice -le 10 ]; then
        selected_pool=${luckpool_pools[$((pool_choice-1))]}
        pool_url=$(echo $selected_pool | awk '{print $1}')
        pool_name="LUCKPOOL-$(echo $selected_pool | awk '{print $3}')"
        
        # Get user input
        echo -ne "${CYAN}Enter Wallet Address: ${NC}"
        read wallet
        echo -ne "${CYAN}Enter Worker Name: ${NC}"
        read worker
        echo -ne "${CYAN}Enter CPU Usage % (1-100): ${NC}"
        read cpu_usage
        
        # Validate CPU usage
        if [ $cpu_usage -lt 1 ] || [ $cpu_usage -gt 100 ]; then
            echo -e "${RED}Invalid CPU usage! Using default 50%${NC}"
            cpu_usage=50
        fi
        
        start_mining "$pool_name" "$pool_url" "$wallet" "$worker" "$cpu_usage"
    else
        echo -e "${RED}Invalid selection!${NC}"
        sleep 2
        luckpool_menu
    fi
}

# Check dependencies
check_dependencies() {
    local deps=("bc")
    for dep in "${deps[@]}"; do
        if ! command -v $dep &> /dev/null; then
            echo -e "${YELLOW}Installing $dep...${NC}"
            if command -v apt-get &> /dev/null; then
                apt-get update && apt-get install -y $dep
            elif command -v yum &> /dev/null; then
                yum install -y $dep
            elif command -v apk &> /dev/null; then
                apk add $dep
            else
                echo -e "${RED}Cannot install $dep automatically. Please install manually.${NC}"
            fi
        fi
    done
}

# Initialize script
init_script() {
    echo -e "${PURPLE}Checking dependencies...${NC}"
    check_dependencies &
    pid=$!
    loading_animation $pid "System Check"
    
    echo -e "${GREEN}System ready!${NC}"
    sleep 1
}

# Start the script
init_script
main_menu
