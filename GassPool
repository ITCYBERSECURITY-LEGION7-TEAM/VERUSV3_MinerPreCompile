#!/bin/bash

# Mining Auto Configuration Script
# Supports Vipor and Luckpool with animated UI

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration file
CONFIG_FILE="config.json"
CCMINER_PATH="./ccminer"  # Adjust path to your ccminer

# Vipor Pools (10 pools)
VIPOR_POOLS=(
    "sg.vipor.net:5040"
    "eu.vipor.net:5040"
    "us.vipor.net:5040"
    "ca.vipor.net:5040"
    "au.vipor.net:5040"
    "jp.vipor.net:5040"
    "kr.vipor.net:5040"
    "br.vipor.net:5040"
    "ru.vipor.net:5040"
    "in.vipor.net:5040"
)

# Luckpool Pools (10 pools)
LUCKPOOL_POOLS=(
    "na.luckpool.net:3960"
    "eu.luckpool.net:3960"
    "ap.luckpool.net:3960"
    "sa.luckpool.net:3960"
    "ca.luckpool.net:3960"
    "au.luckpool.net:3960"
    "sg.luckpool.net:3960"
    "jp.luckpool.net:3960"
    "kr.luckpool.net:3960"
    "in.luckpool.net:3960"
)

# Animation functions
show_animation() {
    local frames=("▰▱▱▱▱▱▱" "▰▰▱▱▱▱▱" "▰▰▰▱▱▱▱" "▰▰▰▰▱▱▱" "▰▰▰▰▰▱▱" "▰▰▰▰▰▰▱" "▰▰▰▰▰▰▰" "▰▰▰▰▰▰▱" "▰▰▰▰▰▱▱" "▰▰▰▰▱▱▱" "▰▰▰▱▱▱▱" "▰▰▱▱▱▱▱")
    for i in {1..3}; do
        for frame in "${frames[@]}"; do
            echo -ne "\r${CYAN}[${frame}]${NC} Initializing Mining System..."
            sleep 0.1
        done
    done
    echo -e "\r${GREEN}[▰▰▰▰▰▰▰]${NC} Mining System Ready!          "
}

progress_bar() {
    local duration=$1
    local steps=50
    for ((i=0; i<=steps; i++)); do
        percentage=$((i * 2))
        completed=$((i * 50 / steps))
        remaining=$((50 - completed))
        bar=$(printf "%0.s▰" $(seq 1 $completed))
        empty=$(printf "%0.s▱" $(seq 1 $remaining))
        
        # Color changes based on percentage
        if [ $percentage -lt 30 ]; then
            color=$RED
        elif [ $percentage -lt 70 ]; then
            color=$YELLOW
        else
            color=$GREEN
        fi
        
        echo -ne "\r${color}[${bar}${empty}] ${percentage}%${NC}"
        sleep $(echo "scale=2; $duration/$steps" | bc)
    done
    echo
}

# Check if ccminer exists
check_ccminer() {
    if [ ! -f "$CCMINER_PATH" ]; then
        echo -e "${RED}Error: ccminer not found at $CCMINER_PATH${NC}"
        echo -e "${YELLOW}Please update CCMINER_PATH variable in the script${NC}"
        exit 1
    fi
    
    if [ ! -x "$CCMINER_PATH" ]; then
        chmod +x "$CCMINER_PATH"
    fi
}

# Create config.json
create_config() {
    local pool=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    
    cat > "$CONFIG_FILE" << EOF
{
    "pool": "$pool",
    "wallet": "$wallet",
    "worker": "$worker",
    "cpu_usage": $cpu_usage,
    "algorithm": "verus",
    "threads": $(nproc),
    "max-temp": 85,
    "auto-start": true
}
EOF
    echo -e "${GREEN}Configuration file created: $CONFIG_FILE${NC}"
}

# Show mining header
show_mining_header() {
    clear
    echo -e "${PURPLE}"
    echo "  ██████╗ ██████╗███╗   ███╗██╗███╗   ██╗███████╗██████╗ "
    echo " ██╔════╝██╔════╝████╗ ████║██║████╗  ██║██╔════╝██╔══██╗"
    echo " ██║     ██║     ██╔████╔██║██║██╔██╗ ██║█████╗  ██████╔╝"
    echo " ██║     ██║     ██║╚██╔╝██║██║██║╚██╗██║██╔══╝  ██╔══██╗"
    echo " ╚██████╗╚██████╗██║ ╚═╝ ██║██║██║ ╚████║███████╗██║  ██║"
    echo "  ╚═════╝ ╚═════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝"
    echo -e "${NC}"
    echo -e "${CYAN}╔══════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║               MINING CONTROL PANEL           ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════╝${NC}"
    echo
}

# Show pool selection
show_pool_selection() {
    echo -e "${YELLOW}Select Mining Pool:${NC}"
    echo -e "${GREEN}1. Vipor Network${NC}"
    echo -e "   ${WHITE}Pools available:${NC}"
    for i in "${!VIPOR_POOLS[@]}"; do
        echo -e "   ${CYAN}$((i+1)). ${VIPOR_POOLS[i]}${NC}"
    done
    echo
    echo -e "${GREEN}2. Luckpool Network${NC}"
    echo -e "   ${WHITE}Pools available:${NC}"
    for i in "${!LUCKPOOL_POOLS[@]}"; do
        echo -e "   ${CYAN}$((i+1)). ${LUCKPOOL_POOLS[i]}${NC}"
    done
    echo
}

# Get user input
get_user_input() {
    local choice
    local wallet
    local worker
    local cpu_usage
    
    while true; do
        read -p "$(echo -e ${YELLOW}'Select pool type (1 for Vipor, 2 for Luckpool): '${NC})" choice
        
        case $choice in
            1)
                echo -e "${GREEN}Selected: Vipor Network${NC}"
                pool_type="vipor"
                selected_pools=("${VIPOR_POOLS[@]}")
                break
                ;;
            2)
                echo -e "${GREEN}Selected: Luckpool Network${NC}"
                pool_type="luckpool"
                selected_pools=("${LUCKPOOL_POOLS[@]}")
                break
                ;;
            *)
                echo -e "${RED}Invalid selection! Please choose 1 or 2${NC}"
                ;;
        esac
    done
    
    # Select specific pool
    echo -e "\n${WHITE}Available ${pool_type^^} pools:${NC}"
    for i in "${!selected_pools[@]}"; do
        echo -e "  ${CYAN}$((i+1)). ${selected_pools[i]}${NC}"
    done
    
    while true; do
        read -p "$(echo -e ${YELLOW}"Select pool (1-${#selected_pools[@]}): "${NC})" pool_choice
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#selected_pools[@]} ]; then
            selected_pool="${selected_pools[$((pool_choice-1))]}"
            echo -e "${GREEN}Selected pool: $selected_pool${NC}"
            break
        else
            echo -e "${RED}Invalid selection! Please choose between 1-${#selected_pools[@]}${NC}"
        fi
    done
    
    # Get wallet address
    while true; do
        read -p "$(echo -e ${YELLOW}'Enter Wallet Address: '${NC})" wallet
        if [ -n "$wallet" ]; then
            break
        else
            echo -e "${RED}Wallet address cannot be empty!${NC}"
        fi
    done
    
    # Get worker name
    while true; do
        read -p "$(echo -e ${YELLOW}'Enter Worker Name: '${NC})" worker
        if [ -n "$worker" ]; then
            break
        else
            echo -e "${RED}Worker name cannot be empty!${NC}"
        fi
    done
    
    # Get CPU usage
    while true; do
        read -p "$(echo -e ${YELLOW}'Enter CPU Usage percentage (1-100): '${NC})" cpu_usage
        if [[ $cpu_usage =~ ^[0-9]+$ ]] && [ $cpu_usage -ge 1 ] && [ $cpu_usage -le 100 ]; then
            break
        else
            echo -e "${RED}Please enter a valid CPU usage between 1-100${NC}"
        fi
    done
    
    # Return values
    POOL="$selected_pool"
    WALLET="$wallet"
    WORKER="$worker"
    CPU_USAGE="$cpu_usage"
}

# Start mining
start_mining() {
    local pool=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    
    echo -e "\n${GREEN}Starting Mining Process...${NC}"
    echo -e "${CYAN}Pool:${NC} $pool"
    echo -e "${CYAN}Wallet:${NC} $wallet"
    echo -e "${CYAN}Worker:${NC} $worker"
    echo -e "${CYAN}CPU Usage:${NC} $cpu_usage%"
    echo -e "${CYAN}Threads:${NC} $(nproc)"
    
    # Show progress bar
    progress_bar 2
    
    # Create config file
    create_config "$pool" "$wallet" "$worker" "$cpu_usage"
    
    echo -e "\n${GREEN}Launching ccminer...${NC}"
    echo -e "${YELLOW}Press Ctrl+C to stop mining${NC}"
    echo -e "${CYAN}╔══════════════════════════════════════════════╗${NC}"
    
    # Start ccminer with the configuration
    "$CCMINER_PATH" -a verus -o stratum+tcp://$pool -u $wallet.$worker -p x -t $(( $(nproc) * cpu_usage / 100 ))
}

# Main function
main() {
    show_mining_header
    show_animation
    echo
    
    check_ccminer
    show_pool_selection
    
    # Get user input
    get_user_input
    
    # Confirm and start
    echo -e "\n${YELLOW}Summary:${NC}"
    echo -e "  Pool: $POOL"
    echo -e "  Wallet: $WALLET"
    echo -e "  Worker: $WORKER"
    echo -e "  CPU Usage: $CPU_USAGE%"
    
    read -p "$(echo -e ${YELLOW}'Start mining? (y/n): '${NC})" confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        start_mining "$POOL" "$WALLET" "$WORKER" "$CPU_USAGE"
    else
        echo -e "${RED}Mining cancelled.${NC}"
        exit 0
    fi
}

# Error handling
set -e
trap 'echo -e "${RED}Error occurred at line $LINENO${NC}"; exit 1' ERR

# Run main function
main "$@"
