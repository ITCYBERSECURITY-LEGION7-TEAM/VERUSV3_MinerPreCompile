#!/bin/bash

# Mining Auto Configuration Script
# Supports Vipor and Luckpool with real-time monitoring

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration file
CONFIG_FILE="config.json"
MINER_DIR="ccminer"
WALLET_ADDRESS=""
WORKER_NAME=""
POOL_TYPE=""
CPU_USAGE=""

# Pool configurations
declare -A POOLS=(
    ["vipor"]="sg.vipor.net:5040;na.vipor.net:5040;eu.vipor.net:5040;us.vipor.net:5040;au.vipor.net:5040;ca.vipor.net:5040;br.vipor.net:5040;in.vipor.net:5040;jp.vipor.net:5040;kr.vipor.net:5040"
    ["luckpool"]="na.luckpool.net:3960;eu.luckpool.net:3960;ap.luckpool.net:3960;sa.luckpool.net:3960;ca.luckpool.net:3960;us.luckpool.net:3960;au.luckpool.net:3960;sg.luckpool.net:3960;jp.luckpool.net:3960;in.luckpool.net:3960"
)

# API endpoints
VIPOR_API="https://vipor.net/api/miner/VRSC/"
LUCKPOOL_API="https://luckpool.net/api/miner/"

# Function to display banner
show_banner() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                   MINING AUTOMATION SCRIPT                   ║"
    echo "║                  Support: Vipor & Luckpool                  ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to check dependencies
check_dependencies() {
    local deps=("curl" "jq" "wget")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo -e "${YELLOW}Installing $dep...${NC}"
            sudo apt-get update && sudo apt-get install -y "$dep"
        fi
    done
}

# Function to download ccminer
download_ccminer() {
    if [ ! -d "$MINER_DIR" ]; then
        echo -e "${YELLOW}Downloading ccminer...${NC}"
        # Download ccminer (example URL - replace with actual ccminer download URL)
        wget -O ccminer.tar.gz "https://github.com/trexminer/T-Rex/releases/download/0.25.9/t-rex-0.25.9-linux.tar.gz"
        tar -xzf ccminer.tar.gz
        mv t-rex-0.25.9-linux "$MINER_DIR"
        chmod +x "$MINER_DIR"/*
        rm ccminer.tar.gz
        echo -e "${GREEN}ccminer downloaded successfully!${NC}"
    fi
}

# Function to show menu
show_menu() {
    echo -e "${BLUE}"
    echo "Select Mining Pool:"
    echo "1) Vipor Pool"
    echo "2) Luckpool"
    echo "3) Exit"
    echo -e "${NC}"
}

# Function to get user input
get_user_input() {
    while true; do
        read -p "Enter your choice (1-3): " choice
        case $choice in
            1)
                POOL_TYPE="vipor"
                break
                ;;
            2)
                POOL_TYPE="luckpool"
                break
                ;;
            3)
                echo -e "${YELLOW}Exiting...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice! Please select 1, 2, or 3.${NC}"
                ;;
        esac
    done

    read -p "Enter Wallet Address: " WALLET_ADDRESS
    read -p "Enter Worker Name: " WORKER_NAME
    
    while true; do
        read -p "Enter CPU Usage percentage (10-100): " CPU_USAGE
        if [[ $CPU_USAGE =~ ^[1-9][0-9]?$|^100$ ]] && [ $CPU_USAGE -ge 10 ] && [ $CPU_USAGE -le 100 ]; then
            break
        else
            echo -e "${RED}Please enter a valid CPU usage between 10 and 100${NC}"
        fi
    done
}

# Function to create config.json
create_config() {
    local pool_servers=(${POOLS[$POOL_TYPE]//;/ })
    
    cat > "$CONFIG_FILE" << EOF
{
    "pool_type": "$POOL_TYPE",
    "wallet_address": "$WALLET_ADDRESS",
    "worker_name": "$WORKER_NAME",
    "cpu_usage": $CPU_USAGE,
    "pools": [
EOF

    for ((i=0; i<${#pool_servers[@]}; i++)); do
        if [ $i -eq $((${#pool_servers[@]}-1)) ]; then
            echo "        \"${pool_servers[$i]}\"" >> "$CONFIG_FILE"
        else
            echo "        \"${pool_servers[$i]}\"," >> "$CONFIG_FILE"
        fi
    done

    cat >> "$CONFIG_FILE" << EOF
    ],
    "algorithm": "verus",
    "intensity": $CPU_USAGE
}
EOF
    echo -e "${GREEN}Configuration file created: $CONFIG_FILE${NC}"
}

# Function to get pool stats from API
get_pool_stats() {
    local wallet=$1
    local pool=$2
    
    case $pool in
        "vipor")
            local api_url="${VIPOR_API}${wallet}/verus"
            curl -s "$api_url" | jq '.'
            ;;
        "luckpool")
            local api_url="${LUCKPOOL_API}${wallet}"
            curl -s "$api_url" | jq '.'
            ;;
    esac
}

# Function to display mining dashboard
show_dashboard() {
    local wallet=$1
    local worker=$2
    local pool=$3
    
    while true; do
        clear
        show_banner
        
        echo -e "${GREEN}=== MINING DASHBOARD ===${NC}"
        echo -e "${CYAN}Pool:${NC} $pool"
        echo -e "${CYAN}Wallet:${NC} $wallet"
        echo -e "${CYAN}Worker:${NC} $worker"
        echo -e "${CYAN}CPU Usage:${NC} $CPU_USAGE%"
        echo
        
        # Get and display pool statistics
        echo -e "${YELLOW}=== POOL STATISTICS ===${NC}"
        local stats=$(get_pool_stats "$wallet" "$pool")
        
        if [ "$pool" == "vipor" ]; then
            local hashrate=$(echo "$stats" | jq -r '.hashrate // "N/A"')
            local balance=$(echo "$stats" | jq -r '.balance // "N/A"')
            local workers=$(echo "$stats" | jq -r '.workers // "N/A"')
            local last_share=$(echo "$stats" | jq -r '.lastShare // "N/A"')
            
            echo -e "Hashrate: ${GREEN}$hashrate${NC}"
            echo -e "Balance: ${GREEN}$balance${NC}"
            echo -e "Active Workers: ${GREEN}$workers${NC}"
            echo -e "Last Share: ${GREEN}$last_share${NC}"
            
            # Display monitoring URL
            echo -e "\n${CYAN}Monitoring URL:${NC}"
            echo -e "https://vipor.net/miner/VRSC/$wallet/verus"
            
        elif [ "$pool" == "luckpool" ]; then
            local hashrate=$(echo "$stats" | jq -r '.hashrate // "N/A"')
            local balance=$(echo "$stats" | jq -r '.balance // "N/A"')
            local miners=$(echo "$stats" | jq -r '.miners // "N/A"')
            local last_submit=$(echo "$stats" | jq -r '.lastSubmit // "N/A"')
            
            echo -e "Hashrate: ${GREEN}$hashrate${NC}"
            echo -e "Balance: ${GREEN}$balance${NC}"
            echo -e "Active Miners: ${GREEN}$miners${NC}"
            echo -e "Last Submit: ${GREEN}$last_submit${NC}"
            
            # Display monitoring URL
            echo -e "\n${CYAN}Monitoring URL:${NC}"
            echo -e "https://luckpool.net/verus/miner.html?$wallet"
        fi
        
        echo -e "\n${YELLOW}=== MINING LOG ===${NC}"
        echo -e "${GREEN}Mining is active...${NC}"
        echo -e "Pool: $pool"
        echo -e "Worker: $worker"
        echo -e "CPU: $CPU_USAGE%"
        echo -e "Status: ${GREEN}RUNNING${NC}"
        
        echo -e "\n${CYAN}Press Ctrl+C to stop mining and return to menu${NC}"
        sleep 10
    done
}

# Function to start mining
start_mining() {
    local pool_servers=(${POOLS[$POOL_TYPE]//;/ })
    local primary_pool="${pool_servers[0]}"
    
    echo -e "${GREEN}Starting mining on $POOL_TYPE...${NC}"
    echo -e "${YELLOW}Primary Pool: $primary_pool${NC}"
    echo -e "${YELLOW}Wallet: $WALLET_ADDRESS${NC}"
    echo -e "${YELLOW}Worker: $WORKER_NAME${NC}"
    echo -e "${YELLOW}CPU Usage: $CPU_USAGE%${NC}"
    
    # Build mining command
    local mining_cmd=""
    if [ -d "$MINER_DIR" ]; then
        if [ "$POOL_TYPE" == "vipor" ]; then
            mining_cmd="./$MINER_DIR/t-rex -a verus -o stratum+tcp://$primary_pool -u $WALLET_ADDRESS.$WORKER_NAME -p x -i $CPU_USAGE"
        else
            mining_cmd="./$MINER_DIR/t-rex -a verus -o stratum+tcp://$primary_pool -u $WALLET_ADDRESS.$WORKER_NAME -p x -i $CPU_USAGE"
        fi
        
        echo -e "${CYAN}Mining Command:${NC}"
        echo "$mining_cmd"
        echo
        
        # Start mining in background and show dashboard
        cd "$MINER_DIR" && eval "$mining_cmd" &
        local mining_pid=$!
        cd ..
        
        # Show dashboard
        show_dashboard "$WALLET_ADDRESS" "$WORKER_NAME" "$POOL_TYPE" &
        local dashboard_pid=$!
        
        # Wait for user interrupt
        trap "kill $mining_pid $dashboard_pid 2>/dev/null; echo -e '\n${YELLOW}Mining stopped${NC}'; return" INT
        wait
        
    else
        echo -e "${RED}Miner not found! Please check the installation.${NC}"
    fi
}

# Function to show pool information
show_pool_info() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                       POOL INFORMATION                       ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${GREEN}=== VIPOR POOL ===${NC}"
    echo "Pools: ${POOLS[vipor]//;/ }"
    echo "Algorithm: Verus"
    echo "Website: https://vipor.net"
    echo "Monitoring: https://vipor.net/miner/VRSC/WALLET_ADDRESS/verus"
    echo
    
    echo -e "${GREEN}=== LUCKPOOL ===${NC}"
    echo "Pools: ${POOLS[luckpool]//;/ }"
    echo "Algorithm: Verus"
    echo "Website: https://luckpool.net"
    echo "Monitoring: https://luckpool.net/verus/miner.html?WALLET_ADDRESS"
    echo
}

# Main function
main() {
    show_banner
    check_dependencies
    
    while true; do
        show_banner
        show_pool_info
        show_menu
        get_user_input
        
        if [ -n "$POOL_TYPE" ]; then
            download_ccminer
            create_config
            start_mining
        fi
        
        read -p "Press Enter to continue or Ctrl+C to exit..."
    done
}

# Handle script interruption
trap "echo -e '\n${RED}Script interrupted. Exiting...${NC}'; exit 1" INT

# Run main function
main "$@"
