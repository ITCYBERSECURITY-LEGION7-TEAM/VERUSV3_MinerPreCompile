#!/bin/bash

# Mining Manager Script for Vipor and Luckpool
# Support multiple pools and real-time monitoring

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration file
CONFIG_FILE="config.json"
CCMINER_PATH="./ccminer"  # Adjust path to your ccminer

# Pool configurations
VIPOR_POOLS=(
    "sg.vipor.net:5040"
    "eu.vipor.net:5040"
    "us.vipor.net:5040"
    "au.vipor.net:5040"
    "ca.vipor.net:5040"
    "de.vipor.net:5040"
    "fr.vipor.net:5040"
    "jp.vipor.net:5040"
    "kr.vipor.net:5040"
    "br.vipor.net:5040"
)

LUCKPOOL_POOLS=(
    "na.luckpool.net:3960"
    "eu.luckpool.net:3960"
    "ap.luckpool.net:3960"
    "sa.luckpool.net:3960"
    "ca.luckpool.net:3960"
    "de.luckpool.net:3960"
    "fr.luckpool.net:3960"
    "jp.luckpool.net:3960"
    "sg.luckpool.net:3960"
    "au.luckpool.net:3960"
)

# Function to display banner
show_banner() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                   MINING MANAGER SCRIPT                     ║"
    echo "║                  VIPOR & LUCKPOOL MINER                     ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to create default config
create_default_config() {
    cat > $CONFIG_FILE << EOF
{
    "mining_config": {
        "vipor": {
            "wallet": "",
            "worker": "",
            "cpu_usage": 80,
            "current_pool": ""
        },
        "luckpool": {
            "wallet": "",
            "worker": "",
            "cpu_usage": 80,
            "current_pool": ""
        }
    }
}
EOF
    echo -e "${GREEN}Config file created: $CONFIG_FILE${NC}"
}

# Function to read config
read_config() {
    if [[ ! -f $CONFIG_FILE ]]; then
        create_default_config
    fi
    
    if command -v jq >/dev/null 2>&1; then
        VIPOR_WALLET=$(jq -r '.mining_config.vipor.wallet' $CONFIG_FILE)
        VIPOR_WORKER=$(jq -r '.mining_config.vipor.worker' $CONFIG_FILE)
        VIPOR_CPU=$(jq -r '.mining_config.vipor.cpu_usage' $CONFIG_FILE)
        VIPOR_CURRENT_POOL=$(jq -r '.mining_config.vipor.current_pool' $CONFIG_FILE)
        
        LUCKPOOL_WALLET=$(jq -r '.mining_config.luckpool.wallet' $CONFIG_FILE)
        LUCKPOOL_WORKER=$(jq -r '.mining_config.luckpool.worker' $CONFIG_FILE)
        LUCKPOOL_CPU=$(jq -r '.mining_config.luckpool.cpu_usage' $CONFIG_FILE)
        LUCKPOOL_CURRENT_POOL=$(jq -r '.mining_config.luckpool.current_pool' $CONFIG_FILE)
    else
        echo -e "${YELLOW}jq not installed, using fallback config reading${NC}"
        # Fallback basic parsing
        VIPOR_WALLET=$(grep -A5 '"vipor"' $CONFIG_FILE | grep '"wallet"' | cut -d'"' -f4)
        VIPOR_WORKER=$(grep -A5 '"vipor"' $CONFIG_FILE | grep '"worker"' | cut -d'"' -f4)
        VIPOR_CPU=$(grep -A5 '"vipor"' $CONFIG_FILE | grep '"cpu_usage"' | tr -d ' ,' | cut -d':' -f2)
        LUCKPOOL_WALLET=$(grep -A5 '"luckpool"' $CONFIG_FILE | grep '"wallet"' | cut -d'"' -f4)
        LUCKPOOL_WORKER=$(grep -A5 '"luckpool"' $CONFIG_FILE | grep '"worker"' | cut -d'"' -f4)
        LUCKPOOL_CPU=$(grep -A5 '"luckpool"' $CONFIG_FILE | grep '"cpu_usage"' | tr -d ' ,' | cut -d':' -f2)
    fi
}

# Function to update config
update_config() {
    local pool_type=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    local current_pool=$5
    
    if command -v jq >/dev/null 2>&1; then
        jq --arg pool "$pool_type" \
           --arg wallet "$wallet" \
           --arg worker "$worker" \
           --arg cpu "$cpu_usage" \
           --arg current_pool "$current_pool" \
           '.mining_config[$pool].wallet = $wallet |
            .mining_config[$pool].worker = $worker |
            .mining_config[$pool].cpu_usage = ($cpu | tonumber) |
            .mining_config[$pool].current_pool = $current_pool' \
           $CONFIG_FILE > config.tmp && mv config.tmp $CONFIG_FILE
    else
        echo -e "${YELLOW}jq not available, config update skipped${NC}"
    fi
}

# Function to show pool selection
select_pool() {
    local pool_type=$1
    local pools=()
    
    if [[ $pool_type == "vipor" ]]; then
        pools=("${VIPOR_POOLS[@]}")
        echo -e "${CYAN}Select Vipor Pool:${NC}"
    else
        pools=("${LUCKPOOL_POOLS[@]}")
        echo -e "${CYAN}Select Luckpool Pool:${NC}"
    fi
    
    for i in "${!pools[@]}"; do
        echo -e "${GREEN}$((i+1)).${NC} ${pools[$i]} - All Country"
    done
    echo -e "${GREEN}11.${NC} Auto Select (Best Ping)"
    
    local choice
    read -p "Enter your choice (1-11): " choice
    
    case $choice in
        [1-9]|10)
            local index=$((choice-1))
            echo "${pools[$index]}"
            ;;
        11)
            echo "auto"
            ;;
        *)
            echo "${pools[0]}"
            ;;
    esac
}

# Function to get user input
get_mining_input() {
    local pool_type=$1
    
    echo -e "\n${YELLOW}=== $pool_type Mining Configuration ===${NC}"
    
    # Wallet Address
    read -p "Enter Wallet Address: " wallet
    
    # Worker Name
    read -p "Enter Worker Name: " worker
    
    # CPU Usage
    while true; do
        read -p "Enter CPU Usage Percentage (10-100): " cpu_usage
        if [[ $cpu_usage =~ ^[0-9]+$ ]] && [ $cpu_usage -ge 10 ] && [ $cpu_usage -le 100 ]; then
            break
        else
            echo -e "${RED}Invalid CPU usage! Please enter between 10-100.${NC}"
        fi
    done
    
    # Pool Selection
    local selected_pool=$(select_pool $pool_type)
    
    update_config $pool_type "$wallet" "$worker" "$cpu_usage" "$selected_pool"
    
    echo "$wallet" "$worker" "$cpu_usage" "$selected_pool"
}

# Function to start mining
start_mining() {
    local pool_type=$1
    read_config
    
    if [[ $pool_type == "vipor" ]]; then
        local wallet=$VIPOR_WALLET
        local worker=$VIPOR_WORKER
        local cpu_usage=$VIPOR_CPU
        local pool=${VIPOR_CURRENT_POOL:-${VIPOR_POOLS[0]}}
        local algorithm="verus"
    else
        local wallet=$LUCKPOOL_WALLET
        local worker=$LUCKPOOL_WORKER
        local cpu_usage=$LUCKPOOL_CPU
        local pool=${LUCKPOOL_CURRENT_POOL:-${LUCKPOOL_POOLS[0]}}
        local algorithm="verus"
    fi
    
    if [[ -z $wallet ]] || [[ -z $worker ]]; then
        echo -e "${RED}Wallet or Worker not configured! Please configure first.${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Starting $pool_type mining...${NC}"
    echo -e "${CYAN}Wallet:${NC} $wallet"
    echo -e "${CYAN}Worker:${NC} $worker"
    echo -e "${CYAN}Pool:${NC} $pool"
    echo -e "${CYAN}CPU Usage:${NC} $cpu_usage%"
    
    # Build mining command
    local mining_cmd="$CCMINER_PATH -a $algorithm -o stratum+tcp://$pool -u $wallet.$worker -p x --cpu-threads $cpu_usage"
    
    echo -e "${YELLOW}Command:${NC} $mining_cmd"
    echo -e "${GREEN}Mining started! Press Ctrl+C to stop.${NC}"
    
    # Start mining
    eval $mining_cmd
}

# Function to show monitoring
show_monitoring() {
    local pool_type=$1
    read_config
    
    if [[ $pool_type == "vipor" ]]; then
        local wallet=$VIPOR_WALLET
        local monitor_url="https://vipor.net/miner/VRSC/$wallet/verus"
    else
        local wallet=$LUCKPOOL_WALLET
        local monitor_url="https://luckpool.net/verus/miner.html?$wallet"
    fi
    
    if [[ -z $wallet ]]; then
        echo -e "${RED}Wallet not configured!${NC}"
        return 1
    fi
    
    echo -e "${CYAN}Opening $pool_type monitoring dashboard...${NC}"
    echo -e "${YELLOW}URL:${NC} $monitor_url"
    
    # Try to open in browser if available, else show URL
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$monitor_url" 2>/dev/null &
    elif command -v gnome-open >/dev/null 2>&1; then
        gnome-open "$monitor_url" 2>/dev/null &
    fi
    
    # Show real-time monitoring in terminal using curl
    echo -e "\n${GREEN}Real-time Monitoring Data:${NC}"
    
    while true; do
        clear
        echo -e "${CYAN}=== $pool_type Real-time Monitoring ===${NC}"
        echo -e "${YELLOW}Wallet:${NC} $wallet"
        echo -e "${YELLOW}Monitor URL:${NC} $monitor_url"
        echo -e "${YELLOW}Last Update:${NC} $(date)"
        echo -e "\n${GREEN}Fetching data...${NC}"
        
        # Fetch monitoring data (simplified - in real scenario you'd use API)
        curl -s --max-time 10 "$monitor_url" | grep -o '<div[^>]*class=\"[^\"]*stat[^\"]*\"[^>]*>[^<]*</div>' | head -10 | while read line; do
            echo "$line" | sed 's/<[^>]*>//g' | xargs
        done
        
        echo -e "\n${YELLOW}Press Ctrl+C to return to menu${NC}"
        sleep 30
    done
}

# Function to show dashboard
show_dashboard() {
    read_config
    
    while true; do
        clear
        show_banner
        echo -e "${CYAN}=== MINING DASHBOARD ===${NC}"
        echo
        echo -e "${YELLOW}VIPOR CONFIGURATION:${NC}"
        echo -e "  Wallet: ${GREEN}$VIPOR_WALLET${NC}"
        echo -e "  Worker: ${GREEN}$VIPOR_WORKER${NC}"
        echo -e "  CPU Usage: ${GREEN}$VIPOR_CPU%${NC}"
        echo -e "  Current Pool: ${GREEN}$VIPOR_CURRENT_POOL${NC}"
        echo
        echo -e "${YELLOW}LUCKPOOL CONFIGURATION:${NC}"
        echo -e "  Wallet: ${GREEN}$LUCKPOOL_WALLET${NC}"
        echo -e "  Worker: ${GREEN}$LUCKPOOL_WORKER${NC}"
        echo -e "  CPU Usage: ${GREEN}$LUCKPOOL_CPU%${NC}"
        echo -e "  Current Pool: ${GREEN}$LUCKPOOL_CURRENT_POOL${NC}"
        echo
        echo -e "${CYAN}SYSTEM INFORMATION:${NC}"
        echo -e "  CPU Usage: ${GREEN}$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')%${NC}"
        echo -e "  Memory: ${GREEN}$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}')${NC}"
        echo -e "  Uptime: ${GREEN}$(uptime -p)${NC}"
        echo
        echo -e "${YELLOW}Press Enter to return to menu...${NC}"
        read
        break
    done
}

# Function to show available pools
show_pools() {
    local pool_type=$1
    
    clear
    show_banner
    echo -e "${CYAN}=== AVAILABLE POOLS - ${pool_type^^} ===${NC}"
    echo
    
    if [[ $pool_type == "vipor" ]]; then
        pools=("${VIPOR_POOLS[@]}")
    else
        pools=("${LUCKPOOL_POOLS[@]}")
    fi
    
    for pool in "${pools[@]}"; do
        echo -e "${GREEN}✓${NC} $pool - All Country"
        
        # Simple ping test
        host=$(echo $pool | cut -d: -f1)
        port=$(echo $pool | cut -d: -f2)
        
        if ping -c 1 -W 1 $host &> /dev/null; then
            echo -e "  ${GREEN}●${NC} Online"
        else
            echo -e "  ${RED}●${NC} Offline"
        fi
        echo
    done
    
    echo -e "${YELLOW}Press Enter to return...${NC}"
    read
}

# Main menu
main_menu() {
    while true; do
        clear
        show_banner
        echo -e "${CYAN}=== MAIN MENU ===${NC}"
        echo
        echo -e "${GREEN}1.${NC} Configure Vipor Mining"
        echo -e "${GREEN}2.${NC} Configure Luckpool Mining"
        echo -e "${GREEN}3.${NC} Start Vipor Mining"
        echo -e "${GREEN}4.${NC} Start Luckpool Mining"
        echo -e "${GREEN}5.${NC} Vipor Monitoring"
        echo -e "${GREEN}6.${NC} Luckpool Monitoring"
        echo -e "${GREEN}7.${NC} Show Dashboard"
        echo -e "${GREEN}8.${NC} Show Available Pools - Vipor"
        echo -e "${GREEN}9.${NC} Show Available Pools - Luckpool"
        echo -e "${GREEN}0.${NC} Exit"
        echo
        read -p "Enter your choice: " choice
        
        case $choice in
            1)
                get_mining_input "vipor"
                ;;
            2)
                get_mining_input "luckpool"
                ;;
            3)
                start_mining "vipor"
                ;;
            4)
                start_mining "luckpool"
                ;;
            5)
                show_monitoring "vipor"
                ;;
            6)
                show_monitoring "luckpool"
                ;;
            7)
                show_dashboard
                ;;
            8)
                show_pools "vipor"
                ;;
            9)
                show_pools "luckpool"
                ;;
            0)
                echo -e "${GREEN}Thank you for using Mining Manager!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Check dependencies
check_dependencies() {
    local missing=()
    
    # Check for jq (optional)
    if ! command -v jq >/dev/null 2>&1; then
        echo -e "${YELLOW}Warning: jq not installed. Some features may be limited.${NC}"
        echo -e "Install with: sudo apt-get install jq"
    fi
    
    # Check for curl
    if ! command -v curl >/dev/null 2>&1; then
        missing+=("curl")
    fi
    
    # Check if ccminer exists
    if [[ ! -f $CCMINER_PATH ]]; then
        echo -e "${RED}Error: ccminer not found at $CCMINER_PATH${NC}"
        echo -e "Please update CCMINER_PATH variable in the script"
        exit 1
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}Missing dependencies: ${missing[*]}${NC}"
        echo -e "Install with: sudo apt-get install ${missing[*]}"
        exit 1
    fi
}

# Initialize script
init_script() {
    echo -e "${CYAN}Initializing Mining Manager...${NC}"
    
    # Check dependencies
    check_dependencies
    
    # Create config if not exists
    if [[ ! -f $CONFIG_FILE ]]; then
        create_default_config
    fi
    
    # Make script executable
    chmod +x "$0"
}

# Main execution
init_script
main_menu
